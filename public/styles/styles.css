:root {
    /* Control styles */
    --control-btn-color: #9b99fc;
    --control-btn-color-hover: #6a68c5;
    /* Grid styles */
    --grid-clr: #000;
    /* Cell styles */
    --cell-selected-clr: rgba(188, 218, 228, 0.418);
    --cell-empty-clr: rgb(13, 27, 58);
    --cell-highlight-vertical-clr: rgba(218, 165, 32, 0.3);
    --cell-highlight-horizontal-clr: rgba(138, 43, 226, 0.3);
    /* Arrow styles */
    --arrow-clr: rgb(13, 27, 58);
    --arrow-margin: 15%;
    --arrow-thickness: 10px;
    --arrow-headwidth: 10px;
    --arrow-headlength: 15px;
}

/* Reset default styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    user-select: none;
}

/* Page layout */
body {
    height: 100%;
    width: 100%;
    font-family: Arial, sans-serif;
    text-align: center;
}

.container {
    display: flex;
    height: 100%;
    width: 100%;
    max-height: 100vh;
}

#dictionary-tab {
    flex: 1;
    display: flex;
    flex-direction: column;
    padding: 10px;
    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
}

#helper-tab {
    flex: 1;
    display: flex;
    flex-direction: column;
    padding: 10px;
    box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
}

#grid-tab {
    flex: 4;
    display: flex;
    flex-direction: column;
    margin-top: 20px;
    margin-bottom: 50px;
}

/* Styles for controls */
.controls {
    margin-bottom: 20px;
}

.controls input,
.controls select,
.controls button {
    min-width: 50px;
    padding: 8px 15px;
    margin: 5px 0px;
    font-size: 14px;
    cursor: pointer;
    /* Set a consistent height for input, select, and button */
    height: 40px;
}

.controls button {
    background-color: var(--control-btn-color);
    border: 1px solid black;
    border-radius: 5px;
    transition: background-color 0.3s ease;
}

.controls button:hover {
    background-color: var(--control-btn-color-hover);
}

.controls button i {
    font-size: 24px;
}

.controls button:has(>i) {
    height: 51px;
    width: 51px;
}

/* Styles for grid and cells */
.grid {
    display: grid;
    margin-left: auto;
    margin-right: auto;
    overflow: auto;
    max-width: 60vw;
    width: 100%;
    /* The inner cells share borders with the neighboring cells. The outer cells needs this wrapper to have the same border width */
    border: 1px solid var(--grid-clr);
}

.cell {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    font-size: 2rem;
    text-align: center;
    text-transform: uppercase;
    /* Fill available space, but restrict to square cells */
    width: 100%;
    height: 100%;
    aspect-ratio: 1 / 1;
    /* Adds spacing around inner text */
    padding-left: 4px;
    padding-right: 4px;
    /* Highlight grid lines */
    border: 1px solid var(--grid-clr);
    /* Required for pseudo-elements (highlights) */
    position: relative;
    /* Indicate that the cells are selectable */
    cursor: pointer;
    /* Break word */
    word-wrap: break-word;
    white-space: pre-wrap;
}

.cell>div {
    display: flex;
    justify-content: center;
    align-items: center;
    /* Each sub-cell takes space as needed */
    flex: 1;
    width: 100%;
    /* Adds spacing around inner text */
    padding-left: 4px;
    padding-right: 4px;
    /* Break word */
    word-wrap: break-word;
    white-space: pre-wrap;
}

.cell>div:nth-child(2) {
    /* Add a border to separate the two halves */
    margin-top: 1px;
    border-top: 1px solid var(--grid-clr);
}

.cell:has(> div) {
    /* Remove padding for cells with sub-cells */
    padding: 0;
}

.cell[contenteditable="true"]:focus,
.cell>div[contenteditable="true"]:focus {
    /* Highlight the focused cell by changing its color */
    border: none;
    background-color: var(--cell-selected-clr);
}

.cell.highlight-selected {
    background-color: var(--cell-selected-clr);
}

.cell.highlight-vertical::before {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    left: 50%;
    width: 4px;
    background-color: var(--cell-highlight-vertical-clr);
    transform: translateX(-50%);
}

.cell.highlight-horizontal::after {
    content: '';
    position: absolute;
    left: 0;
    right: 0;
    top: 50%;
    height: 4px;
    background-color: var(--cell-highlight-horizontal-clr);
    transform: translateY(-50%);
}

.cell:empty,
.cell div:empty {
    /* Hide the caret/cursor for empty cells. Otherwise it displays in the top of the div */
    caret-color: transparent;
}

.cell::selection {
    /* Disable default selection background */
    background: none;
}

.cell.hint {
    /* Shrink text to fit and allow breaking lines */
    font-size: 1rem;
    /* Make hints italic */
    font-style: italic;
}

.cell.empty {
    color: var(--cell-empty-clr);
    background-color: var(--cell-empty-clr);
}

/* Styles for word lists in the sidebars */
.word-list {
    flex: 1;
    overflow-y: auto;
}

.word-list li {
    display: flex;
    justify-content: space-between;
    align-items: center;
    text-transform: uppercase;
    padding: 10px;
    border-bottom: 1px solid #ccc;
    position: relative;
}

.word-list li button {
    background: none;
    border: none;
    cursor: pointer;
}

.word-list li .word {
    cursor: pointer;
}

.word-list li .word.exists {
    color: gray;
    text-decoration: line-through;
}

.word-list li .count::before {
    content: '[ ';
    position: relative;
}

.word-list li .count::after {
    content: ' ]';
    position: relative;
}

/* Styles for the arrow */
.arrow {
    position: relative;
    color: transparent;
}

/* Arrow line (the shaft) */
.arrow::before {
    content: "";
    position: absolute;
    background-color: var(--arrow-clr);
}

.arrow[direction="arrow-up"]::before,
.arrow[direction="arrow-down"]::before {
    width: var(--arrow-thickness);
}

.arrow[direction="arrow-left"]::before,
.arrow[direction="arrow-right"]::before {
    height: var(--arrow-thickness);
}

.arrow[direction="arrow-up"]::before {
    top: calc(var(--arrow-margin) + var(--arrow-headlength));
    bottom: var(--arrow-margin);
}

.arrow[direction="arrow-down"]::before {
    top: var(--arrow-margin);
    bottom: calc(var(--arrow-margin) + var(--arrow-headlength));
}

.arrow[direction="arrow-left"]::before {
    left: calc(var(--arrow-margin) + var(--arrow-headlength));
    right: var(--arrow-margin);
}

.arrow[direction="arrow-right"]::before {
    left: var(--arrow-margin);
    right: calc(var(--arrow-margin) + var(--arrow-headlength));
}

/* Arrow triangle (the head) */
.arrow::after {
    content: "";
    position: absolute;
    width: 0;
    height: 0;
    border-style: solid;
}

.arrow[direction="arrow-up"]::after {
    border-width: 0 var(--arrow-headwidth) var(--arrow-headlength) var(--arrow-headwidth);
    border-color: transparent transparent var(--arrow-clr) transparent;
    top: var(--arrow-margin);
}

.arrow[direction="arrow-down"]::after {
    border-width: var(--arrow-headlength) var(--arrow-headwidth) 0 var(--arrow-headwidth);
    border-color: var(--arrow-clr) transparent transparent transparent;
    bottom: var(--arrow-margin);
}

.arrow[direction="arrow-left"]::after {
    border-width: var(--arrow-headwidth) var(--arrow-headlength) var(--arrow-headwidth) 0;
    border-color: transparent var(--arrow-clr) transparent transparent;
    left: var(--arrow-margin);
}

.arrow[direction="arrow-right"]::after {
    border-width: var(--arrow-headwidth) 0 var(--arrow-headwidth) var(--arrow-headlength);
    border-color: transparent transparent transparent var(--arrow-clr);
    right: var(--arrow-margin);
}